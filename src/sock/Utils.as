package sock{	import flash.display.*;	import flash.geom.Point;	import flash.utils.getQualifiedClassName;	import flash.utils.getDefinitionByName;		/** @private */	public class Utils {				// convert socket data to object type (int, point, object, number, boolean, array		public function stringToObject(_type:String, _value:String = ''):* {											var _varAsObj:*;			var _parsedValue:* = JSON.parse(_value);						if (_type == 'object' || _type == 'Object') {								_varAsObj = _parsedValue as Object;							} else if (_type == 'point' || _type == 'Point') {												// point				_varAsObj = new Point(_parsedValue.x,  _parsedValue.y);							} else if (_type == 'int' || _type == 'Int') {								// int				_varAsObj = _parsedValue as int;							} else if (_type == 'number' || _type == 'Number') {												// number				_varAsObj = _parsedValue as Number;							} else if (_type == 'array' || _type == 'Array') {												// array					_varAsObj = _parsedValue as Array;								//_varAsObj = _value.split(', ');							} else if (_type == 'boolean' || _type == 'Boolean') {								// boolean				if (_parsedValue == 'true' || _parsedValue == 'True' || _parsedValue == 'TRUE') {					_varAsObj = Boolean(true);				} else if (_parsedValue == 'false' || _parsedValue == 'False' || _parsedValue == 'FALSE') {					_varAsObj = Boolean(false);				} else {					_varAsObj = _parsedValue as Boolean;				}							} else {								// string (default)				_varAsObj = String(_parsedValue);			}									//debugger.debug('string converted to: '+getQualifiedClassName(_varAsObj) );			return _varAsObj;		}				// convert to xml		public function toXMLProperty(_case:String, _value:* = null):XML {						var xmlProperty:XML=<new/>						xmlProperty.setName(_case);			if (_value != null) {				xmlProperty.appendChild(_value);			}			return xmlProperty;		}				// populate _startTime (in the right format)		public function getTime():int {						var _date:Date = new Date();			var _time:int = _date.time;						return _time;		}				/* SINGLETON ========== ========== ========== ========== ========== ========== ========== ========== ========== */				// singleton vars		private static var instance:Utils;		private static var allowInstantiation:Boolean;				// get instance function (singleton)		public static function getInstance():Utils {						if (instance==null) {				allowInstantiation=true;				instance = new Utils();				allowInstantiation=false;			}			return instance;			}				// warning to use as singleton		public function Utils():void {						if (! allowInstantiation) {				throw new Error("Error: Use CommUtils.getInstance() instead of new.");			}		}		}}