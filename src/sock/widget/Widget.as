package sock.widget {		import flash.display.MovieClip;	import flash.display.NativeWindow;	import flash.display.NativeWindowInitOptions;	import flash.display.NativeWindowType;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filesystem.File;	import flash.filesystem.FileMode;	import flash.filesystem.FileStream;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.utils.ByteArray;		import events.LogEvent;		import fl.controls.UIScrollBar;		import sock.Utils;
		/**	 * <p>A supporting class that consists of a floating window that gives the developer insight in all server/client activity and settings. 	 * the widget is mostly for development, and is meant to be hidden/disabled once everything is setup/working/tested correctly, 	 * allowing the server/client to run in the background.</p>	 * 	 * <h2>Log and Command Line</h2>	 * <p>The commandline allows you to manually send a case: value(s) to the server or clients. The log displays the last 100 messages, 	 * it's color coded and uses a symbol to represent an activity:</p>	 * 	 * <h2>Options</h2>	 * <p>the widget window has a number of buttons/indicators that allow the developer to test various scenarios to see if everything is working as expected</p>	 * 	 * <ul>	 * <li>Connect/Disconnect - triggers the disconnection routine (closing all client connections) and the reconnect routine</li>	 * <li>Clients - (server only) displays the number of connected clients (an incoming and outgoing connection per client</li>	 * <li>Echo - (client only) sends a special string to the server, which it returns, to test connection</li>	 * <li>Activity - visualises the incoming/outgoing data (can be clicked for activity statistics)</li>	 * <li>Save Log - save the log (as a text file) to desktop, for debugging</li>	 * <li>Info - when clicked shows connection info IP, ports, uptime</li>	 * </ul>	 * 	 * @example Widget toggle: <listing version="3.0">	 * package {	 * 	 *	import flash.display.Sprite;	 * 	import flash.events.KeyboardEvent;	 *	import sCommunicator.Communicator;	 *	import sCommunicator.events.CommEvent;	 * 	 * 	public class Example extends Sprite {	 * 	 * 	// add the communicator instance	 * 	public var communicator:Communicator = Communicator.getInstance();		 * 	 * 		public function Example() {	 * 	 * 			// initialize the communicator (the last step)	 * 			communicator.initialize('exampleClient', 'client', '10.0.0.1', 4444, 5555);	 * 	 * 			// toggle example	 * 			stage.addEventListener(KeyboardEvent.KEY_UP, toggleComWidget);	 * 		}	 * 			 * 		private function toggleComWidget(e:KeyboardEvent):void {	 * 				 * 			// tilde (~) key	 * 			if (e.keyCode == 192) { 	 * 				communicator.widget.toggleWidget();	 * 			}	 * 		}	 * 	 * 	}	 * }	 * </listing>	 * 	 */	public class Widget {				/** @private */		public var utils:Utils=Utils.getInstance();												// add utils				/* OPTIONAL SETTINGS === ========== ========== ========== ========== ========== ========== ========== ========== */				/** set the widget to visible/invisible on startup, default is true, when developing for mobile devices make sure you set this to false! (use toggleWidget() if you'd like to change this at runtime */		public var visible			: Boolean = true;		/** enable/disable the widgets log scrollbar (you can still scroll using the mousewheel, even when this option is set to false) */		public var scrollbar		: Boolean = true;		/** shows the widget on top of all other open windows, default is false */		public var alwaysInFront	: Boolean = false;		/** enable the visible log, the complete log is still being kept for the saveLog() function */		public var logEnabled		: Boolean = true;		/** the maximum length of the visible log, the complete log is still being kept for the saveLog() function */		public var maxLogLength		: int	= 100;		/* OTHER PUBLIC VARS === ========== ========== ========== ========== ========== ========== ========== ========== */				/** @private */		public var widget			: *;		/** @private */		public var menuBar			: MovieClip;		/** @private */		public var applicationName	: String;		/** @private */		public var type				: String;		/** @private */		public var _infoOverlay		:* 			= new infoOverlay();		/** @private */		public var _activityOverlay	:* 			= new activityOverlay();		/** @private */		public var logField			:TextField 			= new TextField();		/** @private */		public var logString		:String 			= '';		/** @private */		public var tab:mobileTab = new mobileTab();				/* PRIVATE VARS ======== ========== ========== ========== ========== ========== ========== ========== ========== */				private var _scrollBar:UIScrollBar 				= new UIScrollBar;		private var _initOptions:NativeWindowInitOptions;		private var background:widgetBg 				= new widgetBg();		private var _curFormat:TextFormat 				= new TextFormat();  		private var _greyText:TextFormat 				= new TextFormat();  		private var _standardText:TextFormat 			= new TextFormat();  		private var _standardTextLarge:TextFormat 		= new TextFormat();  		private var _importantText:TextFormat 			= new TextFormat();  		private var _importantTextLarge:TextFormat 		= new TextFormat();  		private var _warningText:TextFormat 			= new TextFormat(); 		private var _warningTextLarge:TextFormat 		= new TextFormat();  		private var _sentStrings:int = 0;		private var _receivedStrings:int = 0;		private var _receivedImportantStrings:int = 0;		private var _savedStrings:int = 0;		private var _warnings:int = 0;		private var _width:int = 340;		private var _height:int = 455;		private var _useObjects:Boolean = false;		private var _stageReference:*;		/* INIT VARS ======== ========== ========== ========== ========== ========== ========== ========== ========== */						/** Set the stage reference, mobile/tv only, needed to display the tab/widget on top of the other content */		public function setStage(stage:*):void {			_stageReference = stage;		}				//create widget		private function createWidget():void {						if (NativeWindow.isSupported == true) {								//create window				widget = new NativeWindow(_initOptions);								widget.width = _width;				widget.height = _height;								widget.stage.scaleMode=StageScaleMode.NO_SCALE;								// no scaling				widget.stage.align=StageAlign.TOP_LEFT;										// align top left								widget.title = ''+applicationName+' - Sock ('+type+')';								if (alwaysInFront == true) {					widget.alwaysInFront = true;				}								widget.stage.addChildAt(background, 0);				widget.stage.addChild(logField);				widget.stage.addChild(_scrollBar);				widget.stage.addChild(_activityOverlay);				widget.stage.addChild(_infoOverlay);				widget.stage.addChildAt(menuBar, 1);											} else {								//create object				widget = new MovieClip();								widget.addChildAt(background, 0);				widget.addChild(logField);				widget.addChild(_scrollBar);				widget.addChild(_activityOverlay);				widget.addChild(_infoOverlay);				widget.addChildAt(menuBar, 1);								_stageReference.addChild(widget);				tab.y = 440;							}						populateWidget();		}				private function populateWidget():void {						logField.width = background.width - _scrollBar.width;						logField.y = 5;			logField.visible = true;			createScrollBar();			genOverlay();			_infoOverlay.y = -2;						//add overlays			_infoOverlay.visible = false;			_infoOverlay.uptime.description.text = applicationName+' uptime';			_activityOverlay.visible = false;						menuBar.y = background.height - menuBar.height + 14;			widget.stage.focus = menuBar.navBarMc.stringField;			widget.stage.stageFocusRect = false;									if (NativeWindow.isSupported == true) {				widget.x = widget.stage.fullScreenWidth - widget.width - 10;				widget.y = (widget.stage.fullScreenHeight - widget.height) / 2;			}						if (visible == true) {				showWidget();			}		}				private function gotoWebsite(e:MouseEvent):void {			var url:URLRequest = new URLRequest("http://www.frankdouwes.com");			navigateToURL(url, "_blank");		}				private function showWidget():void {						if (NativeWindow.isSupported == true) {								widget.activate();						} else {								// make widget visible				widget.visible = true;			}		}				private function createScrollBar():void {						if (scrollbar == true) {												//Create the _scrollBar instance				_scrollBar.scrollTarget = logField;				_scrollBar.height = background.height - menuBar.height - 1;				_scrollBar.move(logField.width, logField.y - 5);				_scrollBar.alpha = 1;				_scrollBar.enabled = true;			}						updateScrollBar();		}				private function updateScrollBar():void{			_scrollBar.update();		}				private function genOverlay():void {						var _typeString:String = 'strings';						if (_useObjects == true) {				_typeString = 'objects';			}			_activityOverlay.sent.description.text = 'Sent '+_typeString;			_activityOverlay.received.description.text = 'Received '+_typeString;			_activityOverlay.saved.description.text = 'Saved '+_typeString;			_activityOverlay.warnings.description.text = 'Warnings';			_infoOverlay.server.description.text = 'Server IP address';			_infoOverlay.incoming.description.text = 'Incoming socket port';			_infoOverlay.outgoing.description.text = 'Outgoing socket port';						_activityOverlay.clearLog.title.text = "CLEAR LOG";			_activityOverlay.clearStats.title.text = "CLEAR STATS"			_activityOverlay.clearLog.buttonMode = true;			_activityOverlay.clearLog.mouseChildren = false;			_activityOverlay.clearStats.buttonMode = true;			_activityOverlay.clearStats.mouseChildren = false;			_activityOverlay.clearLog.addEventListener(MouseEvent.CLICK, clearLog);			_activityOverlay.clearStats.addEventListener(MouseEvent.CLICK, clearStats);						updateStats();		}				private function closeWidget(e:Event = null):void {						if (widget.closed == false && NativeWindow.isSupported == true) {							widget.close();					} else if (widget.closed == false) {							widget.visible = false;						}		}				public function onLogEvent(e:LogEvent):void {			log(e.lMessage, e.lFormat, e.lType);		}				/* PUBLIC METHODS ========= ========== ========== ========== ========== ========== ========== ========== ========== */   				/** write a string to the widgets log (in case you'd like to):		 * format = 'standard', 'important' (green text), 'warning' (red text) or 'grey'		 * type (the base character infront of the message) = 'load', 'save', 'server', 'socket', 'incoming' or 'outgoing', anything else means no base character  */		public function log(_message:String = 'debug', format:String = 'standard', type:String = 'normal'):void {						if (visible == false) {								trace(_message);			} 											// prepend message based on type							if (logEnabled == true) {									var _prep:String = "";									if (type == 'save') {					_prep += ' •          ';					_savedStrings ++;				} else if (type == 'load') {					_prep += ' º          ';				} else if (type == 'outgoing') {					_prep = ' >          ';					menuBar.setActivity('outgoing');					_sentStrings ++;				} else if (type == 'incoming') {					_prep += ' <          ';					if (format == 'important') {						_receivedImportantStrings ++;					} else {						_receivedStrings ++;					}					menuBar.setActivity('incoming');				} else if (type == 'socket') {					_prep += ' §          ';				} else if (type == 'server') {					_prep += ' ¥          ';				} else {					_prep += ' -          ';				}														// if text reached max length remove first line...				if (logField.numLines == maxLogLength) {					logString += logField.text; 					clearLog();				}								logField.appendText(_prep+_message+'\n');				logField.scrollV+=1;									// change color				if (format == 'standard') {					_curFormat = _standardText;				} else if (format == 'important') {					_curFormat = _importantText;				} else if (format == 'warning') {					_curFormat = _warningText;					_warnings ++;				} else if (format == 'grey') {					_curFormat = _greyText;				}									logField.setTextFormat(_curFormat, logField.length - _prep.length - _message.length - 2, logField.length)								updateScrollBar();			}							updateStats();					}				/** toggle the widget, if its visible hide it, if its invisible show it */		public function toggleWidget(e:Event = null):void {									if (visible == false || widget.closed == true) {								visible = true;				createWidget();							} else if (NativeWindow.isSupported == true && widget.closed == false) {								visible = false;				widget.close();						} else if (_stageReference) {								_stageReference.removeChild(widget);				widget = null;				visible = false;				tab.y = 0;			}		}				/** clear the visible log */		public function clearLog(e:Event = null):void {			logField.text = "";		}				/** save the full log (as a text file, on the desktop) */		public function saveLog():void {			// hack to find out if we're on mobile			if (NativeWindow.isSupported == true) {								var _fileName:String = applicationName+' '+utils.getTime();				var _log:String = logString + logField.text;								// save log				var ba:ByteArray = new ByteArray();				ba.writeUTFBytes(_log);								var fs : FileStream = new FileStream();								var _dir:File = File.desktopDirectory;				var _settingsFile:File = _dir.resolvePath(_fileName+'.txt');								fs.open(_settingsFile, FileMode.WRITE);				fs.writeBytes(ba);				fs.close();								log('saved log file to desktop',"important","save");					} else {								log('save log is disabled for mobile/tv',"warning","save");			}			}				/** @private */		public function initialize(parent:*, _appName:String, _type:String, _objectMode:Boolean = false):void {						parent.addEventListener(LogEvent.ON_LOG, onLogEvent);						applicationName = _appName;			type = _type;			_useObjects = _objectMode;									// standard text format			_standardText.size = 13;  			_standardText.leading = 3;			_standardText.color = 0x555555;			_standardText.leftMargin = 8;			_standardText.kerning = true;			_standardText.rightMargin = 10;			//_standardText.font = "_serif";						_standardTextLarge.size = 15;  			_standardTextLarge.color = 0x555555;			_standardTextLarge.kerning = true;						//grey			_greyText.size = 13;  			_greyText.leading = 3;			_greyText.leftMargin = 8;			_greyText.kerning = true;			_greyText.rightMargin = 10;			_greyText.color = 0xBBBBBB;						//important (green)			_importantText.size = 13;  			_importantText.leading = 3;			_importantText.leftMargin = 8;			_importantText.kerning = true;			_importantText.rightMargin = 10;			_importantText.color = 0x4bc81f;						_importantTextLarge.size = 15;  			_importantTextLarge.kerning = true;			_importantTextLarge.color = 0x4bc81f;						//warning (red)			_warningText.size = 13;  			_warningText.leading = 3;			_warningText.leftMargin = 8;			_warningText.kerning = true;			_warningText.rightMargin = 10;			_warningText.color = 0xEE0000;						_warningTextLarge.size = 15;  			_warningTextLarge.kerning = true;			_warningTextLarge.color = 0xEE0000;						//add the navigation bar			menuBar = new MenuBar(type);						// logfield options			logField.setTextFormat(_standardText);			logField.height = background.height - menuBar.height +1;			logField.visible = false;			_scrollBar.alpha = 0;						_infoOverlay.logo.addEventListener(MouseEvent.CLICK, gotoWebsite);			_infoOverlay.logo.buttonMode = true;						if (visible == true) {							if (NativeWindow.isSupported == true) {										//generate screen					_initOptions = new NativeWindowInitOptions();										// screen settings					_initOptions.type = NativeWindowType.UTILITY;					_initOptions.transparent = false;					_initOptions.minimizable = true;					_initOptions.resizable = false;					_initOptions.maximizable = false;					createWidget();				} else {										_stageReference.addChild(tab);										tab.title.text = String(applicationName+' - Sock ('+type+')').toUpperCase();					tab.title.width = tab.title.textWidth + 5;					tab.center.width = tab.title.width + 30;					tab.right.x = tab.center.x + tab.center.width - 1;										visible = false;					tab.x = (_width - tab.width) / 2;					tab.addEventListener(MouseEvent.CLICK, toggleWidget);				}			}		}				/** @private */		public function clearStats(e:Event = null):void {			_sentStrings = 0;			_receivedStrings = 0;			_receivedImportantStrings = 0;			_savedStrings = 0;			_warnings = 0;			updateStats();		}				/** @private */		public function updateStats():void {			_activityOverlay.sent.value.text = String(_sentStrings);			_activityOverlay.received.value.text = _receivedImportantStrings+' ('+_receivedStrings+')';						// make text green			if (_receivedImportantStrings > 0) {				_activityOverlay.received.value.setTextFormat(_importantTextLarge, 0, String(_receivedImportantStrings).length)			} else {				_activityOverlay.received.value.setTextFormat(_standardTextLarge);			}						_activityOverlay.saved.value.text = String(_savedStrings);			_activityOverlay.warnings.value.text = String(_warnings);						// make text red			if (_warnings > 0) {				_activityOverlay.warnings.value.setTextFormat(_warningTextLarge);			} else {				_activityOverlay.warnings.value.setTextFormat(_standardTextLarge);			}		}				/* SINGLETON ========== ========== ========== ========== ========== ========== ========== ========== ========== */				// singleton vars		private static var instance:Widget;		private static var allowInstantiation:Boolean;				// get instance function (singleton)		/** @private */		public static function getInstance():Widget {						if (instance==null) {				allowInstantiation=true;				instance = new Widget();				allowInstantiation=false;			}			return instance;			}				/** @private */		public function Widget():void {						if (! allowInstantiation) {				throw new Error("Error: Use Widget.getInstance() instead of new.");			}		}		}}